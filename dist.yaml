openapi: 3.0.0
info:
  title: LaunchDarkly REST API
  description: Build custom integrations with the LaunchDarkly REST API
  termsOfService: 'https://launchdarkly.com/terms'
  contact:
    name: LaunchDarkly Support
    url: 'https://support.launchdarkly.com'
    email: support@launchdarkly.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 3.9.2
security:
  - Token: []
paths:
  /projects:
    get:
      summary: Returns a list of all projects in the account.
      operationId: getProjects
      responses:
        '200':
          description: Projects response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Projects
    post:
      summary: Create a new project with the given key and name.
      operationId: postProject
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Project
                key:
                  type: string
                  example: new-project
                includeInSnippetByDefault:
                  type: boolean
                  example: false
                tags:
                  type: array
                  items:
                    type: string
                  example:
                    - ops
                    - dev
                environments:
                  type: array
                  items:
                    $ref: '#/components/schemas/EnvironmentPost'
                  minLength: 1
                defaultClientSideAvailability:
                  $ref: '#/components/schemas/ClientSideAvailability'
              required:
                - name
                - key
        description: Project keys must be unique within an account.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Project2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Projects
  '/projects/{projectKey}':
    get:
      summary: Fetch a single project by key.
      operationId: getProject
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
      responses:
        '200':
          $ref: '#/components/responses/Project2xx'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Projects
    patch:
      summary: Modify a project by ID.
      operationId: patchProject
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray'
      responses:
        '200':
          $ref: '#/components/responses/Project2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Projects
    delete:
      summary: >-
        Delete a project by key. Caution-- deleting a project will delete all
        associated environments and feature flags. You cannot delete the last
        project in an account.
      operationId: deleteProject
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Projects
  '/projects/{projectKey}/environments':
    post:
      summary: >-
        Create a new environment in a specified project with a given name, key,
        and swatch color.
      operationId: postEnvironment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentPost'
        description: New environment.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Environment2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Environments
  '/projects/{projectKey}/environments/{environmentKey}':
    get:
      summary: Get an environment given a project and key.
      operationId: getEnvironment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
      responses:
        '200':
          $ref: '#/components/responses/Environment2xx'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Environments
    patch:
      summary: Modify an environment by ID.
      operationId: patchEnvironment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray'
      responses:
        '200':
          $ref: '#/components/responses/Environment2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Environments
    delete:
      summary: Delete an environment in a specific project.
      operationId: deleteEnvironment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Environments
  '/projects/{projectKey}/environments/{environmentKey}/apiKey':
    post:
      summary: >-
        Reset an environment's SDK key with an optional expiry time for the old
        key.
      operationId: resetEnvironmentSDKKey
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/EnvironmentSDKKeyExpiry'
      responses:
        '200':
          $ref: '#/components/responses/Environment2xx'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Environments
  '/projects/{projectKey}/environments/{environmentKey}/mobileKey':
    post:
      summary: >-
        Reset an environment's mobile key. The optional expiry for the old key
        is deprecated for this endpoint, so the old key will always expire
        immediately.
      operationId: resetEnvironmentMobileKey
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/EnvironmentMobileKeyExpiry'
      responses:
        '200':
          $ref: '#/components/responses/Environment2xx'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Environments
  '/flags/{projectKey}':
    get:
      summary: Get a list of all features in the given project.
      operationId: getFeatureFlags
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKeyQuery'
        - $ref: '#/components/parameters/SummaryQuery'
        - $ref: '#/components/parameters/ArchivedQuery'
        - $ref: '#/components/parameters/LimitQuery'
        - $ref: '#/components/parameters/OffsetQuery'
        - $ref: '#/components/parameters/FilterQuery'
        - $ref: '#/components/parameters/SortQuery'
        - $ref: '#/components/parameters/Tag'
      responses:
        '200':
          description: Flags response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlags'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Feature flags
    post:
      summary: Creates a new feature flag.
      operationId: postFeatureFlag
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/CloneFlagKeyQuery'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: >-
                    A human-friendly name for the feature flag. Remember to note
                    if this flag is intended to be temporary or permanent.
                  example: new test flag
                key:
                  type: string
                  description: >-
                    A unique key that will be used to reference the flag in your
                    code.
                  example: new-test-flag
                description:
                  type: string
                  description: A description of the feature flag.
                  example: This flag controls whether test feature is turned on or not.
                variations:
                  type: array
                  items:
                    $ref: '#/components/schemas/Variation'
                  description: An array of possible variations for the flag.
                temporary:
                  type: boolean
                  description: Whether or not the flag is a temporary flag.
                tags:
                  type: array
                  items:
                    type: string
                    example: []
                  description: Tags for the feature flag.
                includeInSnippet:
                  type: boolean
                  description: >-
                    Whether or not this flag should be made available to the
                    client-side JavaScript SDK.
                clientSideAvailability:
                  $ref: '#/components/schemas/ClientSideAvailability'
                defaults:
                  $ref: '#/components/schemas/Defaults'
              required:
                - name
                - key
                - variations
        description: Create a new feature flag.
        required: true
      responses:
        '201':
          description: Flag response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Feature flags
  '/flags/{projectKey}/{featureFlagKey}':
    get:
      summary: Get a single feature flag by key.
      operationId: getFeatureFlag
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
        - $ref: '#/components/parameters/EnvironmentKeyQuery'
      responses:
        '200':
          description: Flag response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Feature flags
    patch:
      summary: Perform a partial update to a feature.
      operationId: patchFeatureFlag
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: This is a comment string
                patch:
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchOperation'
        description: >-
          Requires a JSON Patch representation of the desired changes to the
          project, and an optional comment. 'http://jsonpatch.com/' Feature flag
          patches also support JSON Merge Patch format.
          'https://tools.ietf.org/html/rfc7386' The addition of comments is also
          supported.
        required: true
      responses:
        '200':
          description: Feature flag response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Feature flags
    delete:
      summary: >-
        Delete a feature flag in all environments. Be careful-- only delete
        feature flags that are no longer being used by your application.
      operationId: deleteFeatureFlag
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Feature flags
  '/flags/{projectKey}/{featureFlagKey}/copy':
    post:
      summary: >-
        Copies the feature flag configuration from one environment to the same
        feature flag in another environment.
      operationId: copyFeatureFlag
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                source:
                  $ref: '#/components/schemas/FeatureFlagCopyObject'
                target:
                  $ref: '#/components/schemas/FeatureFlagCopyObject'
                comment:
                  type: string
                  description: comment will be included in audit log item for change.
                  example: This is a comment string
                includedActions:
                  type: array
                  items:
                    $ref: '#/components/schemas/CopyActions'
                  description: >-
                    Define the parts of the flag configuration that will be
                    copied.
                excludedActions:
                  type: array
                  items:
                    $ref: '#/components/schemas/CopyActions'
                  description: >-
                    Define the parts of the flag configuration that will not be
                    copied.
        description: Copy feature flag configurations between environments.
        required: true
      responses:
        '201':
          description: Flag configuration copy response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Feature flags
  '/flag-statuses/{projectKey}/{environmentKey}':
    get:
      summary: >-
        Get a list of statuses for all feature flags. The status includes the
        last time the feature flag was requested, as well as the state of the
        flag.
      operationId: getFeatureFlagStatuses
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
      responses:
        '200':
          description: List of feature flag statuses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagStatuses'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Feature flags
  '/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}':
    get:
      summary: Get the status for a particular feature flag.
      operationId: getFeatureFlagStatus
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
      responses:
        '200':
          description: Status of the requested feature flag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagStatus'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Feature flags
  '/flag-status/{projectKey}/{featureFlagKey}':
    get:
      summary: Get the status for a particular feature flag across environments
      operationId: getFeatureFlagStatusAcrossEnvironments
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
      responses:
        '200':
          description: Status of the requested feature flag across environments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagStatusAcrossEnvironments'
        '401':
          $ref: '#/components/responses/Standard401'
        '403':
          $ref: '#/components/responses/BetaApi403'
      tags:
        - Feature flags
  '/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}':
    get:
      summary: Get expiring user targets for feature flag
      operationId: getExpiringUserTargets
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
      responses:
        '200':
          description: User targets of the requested feature flag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTargetingExpirationForFlags'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Feature flags
    patch:
      summary: 'Update, add, or delete expiring user targets on feature flag'
      operationId: patchExpiringUserTargets
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
      requestBody:
        $ref: >-
          #/components/requestBodies/patchExpiringUserTargetsSemanticpatchwithcomment
      responses:
        '200':
          description: User targeting expirations on feature flag response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTargetingExpirationForFlags'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Feature flags
  '/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests':
    get:
      operationId: getFeatureFlagChangeRequests
      summary: Get all change requests for a feature flag
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
        - $ref: '#/components/parameters/EnvironmentKey'
      responses:
        '200':
          description: Feature flag change requests response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagChangeRequests'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Feature flags
    post:
      operationId: postFeatureFlagChangeRequest
      summary: Create a feature flag change request
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
        - $ref: '#/components/parameters/EnvironmentKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: >-
                    A name that describes the changes you would like to apply to
                    a feature flag configuration
                instructions:
                  $ref: '#/components/schemas/SemanticPatchInstruction'
                notifyMemberIds:
                  type: array
                  items:
                    type: string
                  example:
                    - memberId
                    - memberId2
                comment:
                  type: string
                  description: comment will be included in audit log item for change.
              required:
                - description
                - instructions
                - notifyMemberIds
        description: Create a new feature flag change request
      responses:
        '200':
          description: Feature flag change request response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagChangeRequest'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Feature flags
  '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{featureFlagChangeRequestId}':
    get:
      operationId: getFeatureFlagChangeRequest
      summary: Get a single change request for a feature flag
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/FeatureFlagChangeRequestId'
      responses:
        '200':
          description: Feature flag change request response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagChangeRequests'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Feature flags
  '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{featureFlagChangeRequestId}/apply':
    post:
      operationId: postApplyFeatureFlagChangeRequest
      summary: Apply change request for a feature flag
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/FeatureFlagChangeRequestId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: comment will be included in audit log item for change.
                  example: Applying approved changes
        description: Apply a new feature flag change request
        required: true
      responses:
        '200':
          description: Feature flag change request applied response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagChangeRequests'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Feature flags
  '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{featureFlagChangeRequestId}/review':
    post:
      operationId: postReviewFeatureFlagChangeRequest
      summary: Review change request for a feature flag
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/FeatureFlagChangeRequestId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                kind:
                  type: string
                  description: Either approve or decline change request
                  enum:
                    - approve
                    - decline
                  example: approve
                comment:
                  type: string
                  description: comment will be included in audit log item for change.
                  example: This is a comment string
              required:
                - kind
        description: Review a feature flag change request
        required: true
      responses:
        '200':
          description: Feature flag change request reviewed response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagChangeRequests'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Feature flags
  '/segments/{projectKey}/{environmentKey}':
    get:
      summary: Get a list of all user segments in the given project.
      operationId: getUserSegments
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/Tag'
      responses:
        '200':
          description: Segments response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - User segments
    post:
      summary: Creates a new user segment.
      operationId: postUserSegment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A human-friendly name for the user segment.
                  example: new segment
                key:
                  type: string
                  description: >-
                    A unique key that will be used to reference the user segment
                    in feature flags.
                  example: new-segment
                description:
                  type: string
                  description: A description for the user segment.
                  example: Users in this segment will have access to beta features.
                unbounded:
                  type: boolean
                  example: false
                  description: >-
                    Controls whether this segment can support unlimited numbers
                    of users. Requires the beta API and additional setup.
                    Include/exclude lists in this payload are not used in
                    unbounded segments.
                tags:
                  type: array
                  items:
                    type: string
                    example: []
                  description: Tags for the user segment.
              required:
                - name
                - key
        description: Create a new user segment.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/UserSegment2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - User segments
  '/segments/{projectKey}/{environmentKey}/{userSegmentKey}':
    get:
      summary: Get a single user segment by key.
      operationId: getUserSegment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserSegmentKey'
      responses:
        '200':
          $ref: '#/components/responses/UserSegment2xx'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - User segments
    patch:
      summary: Perform a partial update to a user segment.
      operationId: patchUserSegment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserSegmentKey'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray2'
      responses:
        '200':
          $ref: '#/components/responses/UserSegment2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - User segments
    delete:
      summary: Delete a user segment.
      operationId: deleteUserSegment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserSegmentKey'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - User segments
  '/segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey}':
    get:
      summary: Get expiring user targets for user segment
      operationId: getExpiringUserTargetsOnSegment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserSegmentKey'
      responses:
        '200':
          description: User targeting expirations on user segment response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTargetingExpirationForSegment'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - User segments
    patch:
      summary: 'Update, add, or delete expiring user targets on user segment'
      operationId: patchExpiringUserTargetsOnSegment
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserSegmentKey'
      requestBody:
        $ref: >-
          #/components/requestBodies/patchExpiringUserTargetsSemanticpatchwithcomment
      responses:
        '200':
          description: User targeting expirations on user segment response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTargetingExpirationForSegment'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - User segments
  '/segments/{projectKey}/{environmentKey}/{userSegmentKey}/unbounded-users':
    post:
      summary: Update targets included or excluded in an unbounded segment
      operationId: updatedUnboundedSegmentTargets
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserSegmentKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                included:
                  $ref: '#/components/schemas/UnboundedSegmentTargetChanges'
                excluded:
                  $ref: '#/components/schemas/UnboundedSegmentTargetChanges'
        description: >-
          Add or remove user targets to the included or excluded lists on an
          unbounded segment
        required: true
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - User segments
  '/users/{projectKey}/{environmentKey}':
    get:
      summary: >-
        List all users in the environment. Includes the total count of users. In
        each page, there will be up to 'limit' users returned (default 20). This
        is useful for exporting all users in the system for further analysis.
        Paginated collections will include a next link containing a URL with the
        next set of elements in the collection.
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/HMAC'
        - $ref: '#/components/parameters/ScrollId'
      responses:
        '200':
          description: Users response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Users
  '/user-search/{projectKey}/{environmentKey}':
    get:
      summary: >-
        Search users in LaunchDarkly based on their last active date, or a
        search query. It should not be used to enumerate all users in
        LaunchDarkly-- use the List users API resource.
      operationId: getSearchUsers
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/After'
      responses:
        '200':
          description: Users response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Users
  '/users/{projectKey}/{environmentKey}/{userKey}':
    get:
      summary: Get a user by key.
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserKey'
      responses:
        '200':
          description: User response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Users
    delete:
      summary: Delete a user by ID.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserKey'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Users
  '/users/{projectKey}/{environmentKey}/{userKey}/flags':
    get:
      summary: Fetch a single flag setting for a user by key.
      operationId: getUserFlagSettings
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserKey'
      responses:
        '200':
          description: User flags settings response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFlagSettings'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - User settings
  '/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}':
    get:
      summary: Fetch a single flag setting for a user by key.
      operationId: getUserFlagSetting
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
      responses:
        '200':
          description: User flag setting response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFlagSetting'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - User settings
    put:
      summary: >-
        Specifically enable or disable a feature flag for a user based on their
        key.
      operationId: putFlagSetting
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserKey'
        - $ref: '#/components/parameters/FeatureFlagKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                setting:
                  type: boolean
                  description: >
                    The variation value to set for the user. Must match the
                    variation type of the flag.
        required: true
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - User settings
  '/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}':
    get:
      summary: Get expiring dates on flags for user
      operationId: getExpiringUserTargetsForUser
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserKey'
      responses:
        '200':
          description: User targets of the requested feature flag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTargetingExpirationOnFlagsForUser'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - User settings
    patch:
      summary: >-
        Update, add, or delete expiring user targets for a single user on all
        flags
      operationId: patchExpiringUserTargetsForFlags
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/UserKey'
      requestBody:
        $ref: >-
          #/components/requestBodies/patchExpiringUserTargetsSemanticpatchwithcomment
      responses:
        '200':
          description: User Targeting expiration for single user on all flags response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTargetingExpirationOnFlagsForUser'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - User settings
  /auditlog:
    get:
      summary: >-
        Get a list of all audit log entries. The query parameters allow you to
        restrict the returned results by date ranges, resource specifiers, or a
        full-text search query.
      operationId: getAuditLogEntries
      parameters:
        - $ref: '#/components/parameters/Before'
        - $ref: '#/components/parameters/After'
        - $ref: '#/components/parameters/Q'
        - $ref: '#/components/parameters/AuditLimit'
        - $ref: '#/components/parameters/Spec'
      responses:
        '200':
          description: Audit log entries response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogEntries'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Audit log
  '/auditlog/{resourceId}':
    get:
      summary: Use this endpoint to fetch a single audit log entry by its resouce ID.
      operationId: getAuditLogEntry
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        '200':
          description: Audit log entry response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogEntry'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Audit log
  /webhooks:
    get:
      summary: Fetch a list of all webhooks.
      operationId: getWebhooks
      responses:
        '200':
          description: Webhooks response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhooks'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Webhooks
    post:
      summary: Create a webhook.
      operationId: postWebhook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  example: 'https://example.com/example'
                  type: string
                  description: The URL of the remote webhook.
                secret:
                  example: <password>
                  type: string
                  description: >-
                    If sign is true, and the secret attribute is omitted,
                    LaunchDarkly will automatically generate a secret for you.
                sign:
                  type: boolean
                  description: >-
                    If sign is false, the webhook will not include a signature
                    header, and the secret can be omitted.
                'on':
                  type: boolean
                  example: true
                  description: Whether this webhook is enabled or not.
                name:
                  type: string
                  example: Example hook
                  description: The name of the webhook.
                statements:
                  type: array
                  items:
                    $ref: '#/components/schemas/Statement'
                tags:
                  type: array
                  items:
                    type: string
                  example: []
                  description: Tags for the webhook.
              required:
                - url
                - sign
                - 'on'
        description: New webhook.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Webhook2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Webhooks
  '/webhooks/{resourceId}':
    get:
      summary: Get a webhook by ID.
      operationId: getWebhook
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        '200':
          $ref: '#/components/responses/Webhook2xx'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Webhooks
    patch:
      summary: Modify a webhook by ID.
      operationId: patchWebhook
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray'
      responses:
        '200':
          $ref: '#/components/responses/Webhook2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Webhooks
    delete:
      summary: Delete a webhook by ID.
      operationId: deleteWebhook
      parameters:
        - $ref: '#/components/parameters/ResourceId'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Webhooks
  /roles:
    get:
      summary: Return a complete list of custom roles.
      operationId: getCustomRoles
      responses:
        '200':
          description: Custom roles response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRoles'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Custom roles
    post:
      summary: Create a new custom role.
      operationId: postCustomRole
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the custom role.
                  example: revenue team
                description:
                  type: string
                  description: Description of the custom role.
                  example: Description of revenue team role here
                key:
                  type: string
                  description: The 20-hexdigit id or the key for a custom role.
                  example: revenue-team
                policy:
                  type: array
                  items:
                    $ref: '#/components/schemas/Policy'
              required:
                - name
                - key
                - policy
        description: New role or roles to create.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/CustomRole2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Custom roles
  '/roles/{customRoleKey}':
    get:
      summary: Get one custom role by key.
      operationId: getCustomRole
      parameters:
        - $ref: '#/components/parameters/CustomRoleKey'
      responses:
        '200':
          $ref: '#/components/responses/CustomRole2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Custom roles
    patch:
      summary: Modify a custom role by key.
      operationId: patchCustomRole
      parameters:
        - $ref: '#/components/parameters/CustomRoleKey'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray'
      responses:
        '200':
          $ref: '#/components/responses/CustomRole2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Custom roles
    delete:
      summary: Delete a custom role by key.
      operationId: deleteCustomRole
      parameters:
        - $ref: '#/components/parameters/CustomRoleKey'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Custom roles
  /members:
    get:
      summary: Returns a list of all members in the account.
      operationId: getMembers
      parameters:
        - $ref: '#/components/parameters/LimitQuery'
        - $ref: '#/components/parameters/OffsetQuery'
        - $ref: '#/components/parameters/FilterQuery'
        - $ref: '#/components/parameters/SortQuery'
      responses:
        '200':
          description: Members response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Team members
    post:
      summary: Invite new members.
      operationId: postMembers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  email:
                    type: string
                    example: exampleuser@email.com
                  firstName:
                    type: string
                    example: Bob
                  lastName:
                    type: string
                    example: Loblaw
                  role:
                    $ref: '#/components/schemas/Role'
                  customRoles:
                    type: array
                    items:
                      type: string
                      description: The 20-hexdigit id or the key for a custom role.
                      example: revenue-team
                  inlineRole:
                    type: array
                    items:
                      $ref: '#/components/schemas/Statement'
                required:
                  - email
        description: New members to invite.
        required: true
      responses:
        '201':
          description: Members response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Team members
  /members/me:
    get:
      summary: Get the current team member associated with the token
      operationId: getMe
      responses:
        '200':
          $ref: '#/components/responses/Member2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Team members
  '/members/{memberId}':
    get:
      summary: Get a single team member by ID.
      operationId: getMember
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/Member2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Team members
    patch:
      summary: Modify a team member by ID.
      operationId: patchMember
      parameters:
        - $ref: '#/components/parameters/MemberId'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray'
      responses:
        '200':
          $ref: '#/components/responses/Member2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Team members
    delete:
      summary: Delete a team member by ID.
      operationId: deleteMember
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Team members
  /destinations:
    get:
      summary: Returns a list of all data export destinations.
      operationId: getDestinations
      responses:
        '200':
          description: Destinations response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destinations'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Data export destinations
  '/destinations/{projectKey}/{environmentKey}':
    post:
      summary: Create a new data export destination
      operationId: postDestination
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A human-readable name for your data export destination.
                  example: Example Google Pub/Sub Destination
                kind:
                  type: string
                  description: >-
                    The data export destination type. Available choices are
                    kinesis, google-pubsub, mparticle, or segment.
                  example: google-pubsub
                  enum:
                    - google-pubsub
                    - kinesis
                    - mparticle
                    - segment
                config:
                  type: object
                  description: destination-specific configuration.
                  example:
                    project: cool-project
                    topic: test
                'on':
                  type: boolean
                  example: true
                  description: Whether the data export destination is on or not.
              required:
                - name
                - kind
                - config
        description: Create a new data export destination.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Destination2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Data export destinations
  '/destinations/{projectKey}/{environmentKey}/{destinationId}':
    get:
      summary: Get a single data export destination by ID
      operationId: getDestination
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/DestinationId'
      responses:
        '200':
          $ref: '#/components/responses/Destination2xx'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Data export destinations
    patch:
      summary: Perform a partial update to a data export destination.
      operationId: patchDestination
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/DestinationId'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray2'
      responses:
        '200':
          $ref: '#/components/responses/Destination2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Data export destinations
    delete:
      summary: Get a single data export destination by ID
      operationId: deleteDestination
      parameters:
        - $ref: '#/components/parameters/ProjectKey'
        - $ref: '#/components/parameters/EnvironmentKey'
        - $ref: '#/components/parameters/DestinationId'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Data export destinations
  /usage:
    get:
      summary: Returns of the usage endpoints available.
      operationId: getUsage
      responses:
        '200':
          description: Usage endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usage'
        '403':
          $ref: '#/components/responses/BetaApi403'
      tags:
        - Customer Metrics
  /usage/streams:
    get:
      summary: Returns a list of all streams.
      operationId: getStreams
      responses:
        '200':
          description: Stream usage endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Streams'
        '403':
          $ref: '#/components/responses/BetaApi403'
      tags:
        - Customer Metrics
  '/usage/streams/{source}':
    get:
      summary: Get a stream endpoint and return timeseries data.
      operationId: getStream
      parameters:
        - $ref: '#/components/parameters/StreamSource'
      responses:
        '200':
          description: Responds with time series data on stream usage.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
        '403':
          $ref: '#/components/responses/BetaApi403'
        '404':
          $ref: '#/components/responses/StreamUsage404'
      tags:
        - Customer Metrics
  '/usage/streams/{source}/bysdkversion':
    get:
      summary: Get a stream timeseries data by source show sdk version metadata.
      operationId: getStreamBySDK
      parameters:
        - $ref: '#/components/parameters/StreamSource'
      responses:
        '200':
          description: Returns timeseries data and metadata on sdk version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamBySDK'
        '403':
          $ref: '#/components/responses/BetaApi403'
        '404':
          $ref: '#/components/responses/StreamUsage404'
      tags:
        - Customer Metrics
  '/usage/streams/{source}/sdkversions':
    get:
      summary: >-
        Get a stream timeseries data by source and show all sdk version
        associated.
      operationId: getStreamSDKVersion
      parameters:
        - $ref: '#/components/parameters/StreamSource'
      responses:
        '200':
          description: Returns timeseries data and all sdk versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamSDKVersion'
        '403':
          $ref: '#/components/responses/BetaApi403'
        '404':
          $ref: '#/components/responses/StreamUsage404'
      tags:
        - Customer Metrics
  /usage/mau:
    get:
      summary: Get monthly active user data.
      operationId: getMAU
      responses:
        '200':
          description: Returns timeseries data and all sdk versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MAU'
        '403':
          $ref: '#/components/responses/BetaApi403'
      tags:
        - Customer Metrics
  /usage/mau/bycategory:
    get:
      summary: Get monthly active user data by category.
      operationId: getMAUByCategory
      responses:
        '200':
          description: Returns timeseries data and all sdk versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MAUbyCategory'
        '403':
          $ref: '#/components/responses/BetaApi403'
      tags:
        - Customer Metrics
  /usage/events:
    get:
      summary: Get events usage endpoints.
      operationId: getEvents
      responses:
        '200':
          description: Returns timeseries data and all sdk versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        '403':
          $ref: '#/components/responses/BetaApi403'
      tags:
        - Customer Metrics
  '/usage/events/{type}':
    get:
      summary: Get events usage by event type.
      operationId: getEvent
      parameters:
        - $ref: '#/components/parameters/EventType'
      responses:
        '200':
          description: Returns timeseries data and all sdk versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamSDKVersion'
        '403':
          $ref: '#/components/responses/BetaApi403'
        '404':
          $ref: '#/components/responses/StreamUsage404'
      tags:
        - Customer Metrics
  '/usage/evaluations/{envId}/{flagKey}':
    get:
      summary: Get events usage by event id and the feature flag key.
      operationId: getEvaluations
      parameters:
        - $ref: '#/components/parameters/EvaluationEnvId'
        - $ref: '#/components/parameters/EvaluationFlagKey'
      responses:
        '200':
          description: Returns timeseries data and all sdk versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamSDKVersion'
        '403':
          $ref: '#/components/responses/BetaApi403'
        '404':
          $ref: '#/components/responses/EvaluationUsage404'
      tags:
        - Customer Metrics
  /tokens:
    get:
      summary: Returns a list of tokens in the account.
      operationId: getTokens
      parameters:
        - $ref: '#/components/parameters/TokenShowAllQuery'
      responses:
        '200':
          description: Tokens response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Access tokens
    post:
      summary: Create a new token.
      operationId: postToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A human-friendly name for the access token
                  example: My access token
                role:
                  type: string
                  description: The name of a built-in role for the token
                  example: writer
                customRoleIds:
                  type: array
                  items:
                    type: string
                    example: []
                  description: >-
                    A list of custom role IDs to use as access limits for the
                    access token
                inlineRole:
                  type: array
                  items:
                    $ref: '#/components/schemas/Statement'
                serviceToken:
                  type: boolean
                  description: >-
                    Whether the token will be a service token
                    https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens
                defaultApiVersion:
                  type: integer
                  description: The default API version for this token
        description: Create a new access token.
        required: true
      responses:
        '201':
          description: Token response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Access tokens
  '/tokens/{tokenId}':
    get:
      summary: Get a single access token by ID.
      operationId: getToken
      parameters:
        - $ref: '#/components/parameters/TokenId'
      responses:
        '200':
          $ref: '#/components/responses/Token2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Access tokens
    patch:
      summary: Modify an access token by ID.
      operationId: patchToken
      parameters:
        - $ref: '#/components/parameters/TokenId'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray'
      responses:
        '200':
          $ref: '#/components/responses/Token2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Access tokens
    delete:
      summary: Delete an access token by ID.
      operationId: deleteToken
      parameters:
        - $ref: '#/components/parameters/TokenId'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Access tokens
  '/tokens/{tokenId}/reset':
    post:
      summary: >-
        Reset an access token's secret key with an optional expiry time for the
        old key.
      operationId: resetToken
      parameters:
        - $ref: '#/components/parameters/TokenId'
        - $ref: '#/components/parameters/TokenExpiry'
      responses:
        '200':
          $ref: '#/components/responses/Token2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Access tokens
  /account/relay-auto-configs:
    get:
      summary: Returns a list of relay proxy configurations in the account.
      operationId: getRelayProxyConfigs
      responses:
        '200':
          description: Relay proxy configs response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelayProxyConfigs'
      tags:
        - Relay proxy configurations
    post:
      summary: Create a new relay proxy config.
      operationId: postRelayAutoConfig
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A human-friendly name for the relay proxy configuration
                  example: My relay proxy config
                policy:
                  type: array
                  items:
                    $ref: '#/components/schemas/Policy'
        description: Create a new relay proxy configuration
        required: true
      responses:
        '201':
          description: Relay proxy config response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelayProxyConfig'
        '400':
          $ref: '#/components/responses/Standard400'
        '403':
          $ref: '#/components/responses/Standard403'
      tags:
        - Relay proxy configurations
  '/account/relay-auto-configs/{id}':
    get:
      summary: Get a single relay proxy configuration by ID.
      operationId: getRelayProxyConfig
      parameters:
        - $ref: '#/components/parameters/RelayProxyConfigId'
      responses:
        '200':
          $ref: '#/components/responses/RelayProxyConfig2xx'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Relay proxy configurations
    patch:
      summary: Modify a relay proxy configuration by ID.
      operationId: patchRelayProxyConfig
      parameters:
        - $ref: '#/components/parameters/RelayProxyConfigId'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray'
      responses:
        '200':
          $ref: '#/components/responses/RelayProxyConfig2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '404':
          $ref: '#/components/responses/Standard404'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Relay proxy configurations
    delete:
      summary: Delete a relay proxy configuration by ID.
      operationId: deleteRelayProxyConfig
      parameters:
        - $ref: '#/components/parameters/RelayProxyConfigId'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '400':
          $ref: '#/components/responses/Standard400'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Relay proxy configurations
  '/account/relay-auto-configs/{id}/reset':
    post:
      summary: >-
        Reset a relay proxy configuration's secret key with an optional expiry
        time for the old key.
      operationId: resetRelayProxyConfig
      parameters:
        - $ref: '#/components/parameters/RelayProxyConfigId'
        - $ref: '#/components/parameters/RelayProxyConfigsExpiry'
      responses:
        '200':
          $ref: '#/components/responses/RelayProxyConfig2xx'
        '400':
          $ref: '#/components/responses/Standard400'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Relay proxy configurations
  /:
    get:
      summary: Root path
      description: >-
        You can issue a GET request to the root resource to find all of the
        resource categories supported by the API.
      operationId: getRoot
      responses:
        '200':
          $ref: '#/components/responses/Root200'
        '401':
          $ref: '#/components/responses/Standard401'
      tags:
        - Root
  /integrations:
    get:
      summary: >-
        Get a list of all configured audit log event integrations associated
        with this account.
      operationId: getIntegrations
      responses:
        '200':
          description: Integrations response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integrations'
        '403':
          $ref: '#/components/responses/BetaApi403'
      tags:
        - Integrations
  '/integrations/{integrationKey}':
    get:
      summary: Get a list of all configured integrations of a given kind.
      operationId: getIntegrationSubscriptions
      parameters:
        - $ref: '#/components/parameters/IntegrationKey'
      responses:
        '200':
          description: Integrations response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '403':
          $ref: '#/components/responses/BetaApi403'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Integrations
    post:
      summary: Create a new integration subscription of a given kind.
      operationId: postIntegrationSubscription
      parameters:
        - $ref: '#/components/parameters/IntegrationKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A human-readable name for your subscription configuration.
                  example: Example Datadog Integration
                statements:
                  type: array
                  items:
                    $ref: '#/components/schemas/Statement'
                config:
                  type: object
                  description: Integration-specific configuration fields.
                  example:
                    apiKey: 582**************************116
                    hostURL: 'https://api.datadoghq.com'
                'on':
                  type: boolean
                  example: true
                  description: Whether the integration subscription is active or not.
                tags:
                  type: array
                  items:
                    type: string
                  example: []
                  description: Tags for the integration subscription.
              required:
                - name
                - config
        description: Create a new integration subscription.
        required: true
      responses:
        '201':
          description: Integrations response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSubscription'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '409':
          $ref: '#/components/responses/Standard409'
      tags:
        - Integrations
  '/integrations/{integrationKey}/{integrationId}':
    get:
      summary: Get a single integration subscription by ID.
      operationId: getIntegrationSubscription
      parameters:
        - $ref: '#/components/parameters/IntegrationKey'
        - $ref: '#/components/parameters/IntegrationId'
      responses:
        '200':
          description: Integrations response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSubscription'
        '403':
          $ref: '#/components/responses/BetaApi403'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Integrations
    patch:
      summary: Modify an integration subscription by ID.
      operationId: patchIntegrationSubscription
      parameters:
        - $ref: '#/components/parameters/IntegrationKey'
        - $ref: '#/components/parameters/IntegrationId'
      requestBody:
        $ref: '#/components/requestBodies/PatchOperationArray'
      responses:
        '200':
          description: Integrations response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSubscription'
        '400':
          $ref: '#/components/responses/Standard400'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Integrations
    delete:
      summary: Delete an integration subscription by ID.
      operationId: deleteIntegrationSubscription
      parameters:
        - $ref: '#/components/parameters/IntegrationKey'
        - $ref: '#/components/parameters/IntegrationId'
      responses:
        '204':
          $ref: '#/components/responses/Standard204'
        '401':
          $ref: '#/components/responses/Standard401'
        '404':
          $ref: '#/components/responses/Standard404'
      tags:
        - Integrations
servers:
  - url: 'https://app.launchdarkly.com/api/v2'
components:
  securitySchemes:
    Token:
      type: apiKey
      name: Authorization
      in: header
      description: 'https://app.launchdarkly.com/settings#/tokens'
  schemas:
    Link:
      type: object
      properties:
        href:
          type: string
          example: /api/v2/endpoint
        type:
          type: string
          example: application/json
    Links:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Link'
        next:
          $ref: '#/components/schemas/Link'
    Id:
      type: string
      description: The unique resource id.
      example: 5a580a01b4ff89217bdf9dc1
    Environment:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _id:
          $ref: '#/components/schemas/Id'
        key:
          type: string
          example: production
          description: The key for the environment.
        name:
          type: string
          example: Production
          description: The name of the environment.
        apiKey:
          type: string
          example: XXX
          description: The SDK key for backend LaunchDarkly SDKs.
        mobileKey:
          type: string
          example: XXX
          description: The SDK key for mobile LaunchDarkly SDKs.
        color:
          type: string
          example: '417505'
          description: The swatch color for the environment.
        defaultTtl:
          type: number
          example: 0
          description: The default TTL.
        secureMode:
          type: boolean
          example: false
          description: Determines if this environment is in safe mode.
        defaultTrackEvents:
          type: boolean
          example: false
          description: Set to true to send detailed event information for new flags.
        tags:
          type: array
          items:
            type: string
          description: An array of tags for this environment.
        requireComments:
          type: boolean
          example: false
          description: >-
            Determines if this environment requires comments for flag and
            segment changes.
        confirmChanges:
          type: boolean
          example: false
          description: >-
            Determines if this environment requires confirmation for flag and
            segment changes.
    ClientSideAvailability:
      type: object
      properties:
        usingEnvironmentId:
          type: boolean
          description: >-
            When set to true, this flag will be available to SDKs using the
            client-side id.
        usingMobileKey:
          type: boolean
          description: >-
            When set to true, this flag will be available to SDKS using a mobile
            key.
    Project:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _id:
          $ref: '#/components/schemas/Id'
        key:
          type: string
          example: zentasks
        name:
          type: string
          example: Zentasks
        includeInSnippetByDefault:
          type: boolean
          example: true
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
        tags:
          type: array
          items:
            type: string
          description: An array of tags for this project.
        defaultClientSideAvailability:
          $ref: '#/components/schemas/ClientSideAvailability'
    Projects:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    EnvironmentPost:
      type: object
      properties:
        name:
          type: string
          description: The name of the new environment.
          example: Development
        key:
          type: string
          description: A project-unique key for the new environment.
          example: dev
        color:
          type: string
          description: >-
            A color swatch (as an RGB hex value with no leading '#', e.g.
            C8C8C8).
          example: '417505'
        defaultTtl:
          type: number
          description: The default TTL for the new environment.
          example: 0
        secureMode:
          type: boolean
          description: Determines whether the environment is in secure mode.
          example: false
        defaultTrackEvents:
          type: boolean
          description: >-
            Set to true to send detailed event information for newly created
            flags.
          example: false
        tags:
          type: array
          description: An array of tags for this environment.
          items:
            type: string
          example:
            - tag1
            - tag2
        requireComments:
          type: boolean
          description: >-
            Determines if this environment requires comments for flag and
            segment changes.
          example: false
        confirmChanges:
          type: boolean
          description: >-
            Determines if this environment requires confirmation for flag and
            segment changes.
          example: false
      required:
        - name
        - key
        - color
    PatchOperation:
      type: object
      properties:
        op:
          type: string
          example: replace
        path:
          type: string
          example: /name
        value:
          type: object
          example: My resource name
      required:
        - op
        - path
        - value
    Variation:
      type: object
      required:
        - value
      properties:
        _id:
          type: string
          example: 24b32dd3-0ba6-46ee-86af-230eebf3c7cb
        name:
          type: string
          example: 'True'
        description:
          type: string
          example: The true variation
        value:
          type: object
    CustomProperty:
      type: object
      description: A name and value describing a custom property.
      properties:
        name:
          type: string
          description: The name of the property.
          example: My property
        value:
          type: array
          description: Values for this property.
          items:
            type: string
            example:
              - Value 1
              - Value 2
      required:
        - name
    Role:
      type: string
      enum:
        - writer
        - reader
        - admin
        - owner
    Member:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _id:
          $ref: '#/components/schemas/Id'
        role:
          $ref: '#/components/schemas/Role'
        email:
          type: string
          example: user@launchdarkly.com
        firstName:
          type: string
          example: Alan
        lastName:
          type: string
          example: Turing
        _verified:
          type: boolean
        _pendingInvite:
          type: boolean
        isBeta:
          type: boolean
        customRoles:
          type: array
          items:
            $ref: '#/components/schemas/Id'
    Target:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
            example: >-
              "1461797806427-7-115540266",
              "00142875-a39d-4028-a3b7-987ccd151649"
        variation:
          type: integer
    WeightedVariation:
      type: object
      properties:
        variation:
          type: integer
        weight:
          type: integer
    Rollout:
      type: object
      properties:
        bucketBy:
          type: string
        variations:
          type: array
          items:
            $ref: '#/components/schemas/WeightedVariation'
    Clause:
      type: object
      properties:
        _id:
          type: string
        attribute:
          type: string
          example: groups
        op:
          type: string
          example: in
        values:
          type: array
          items:
            type: object
            example: Top Customers
        negate:
          type: boolean
    Rule:
      type: object
      properties:
        _id:
          type: string
        variation:
          type: integer
        trackEvents:
          type: boolean
        rollout:
          $ref: '#/components/schemas/Rollout'
        clauses:
          type: array
          items:
            $ref: '#/components/schemas/Clause'
        description:
          type: string
    Fallthrough:
      type: object
      properties:
        variation:
          type: integer
        rollout:
          $ref: '#/components/schemas/Rollout'
    Prerequisite:
      type: object
      properties:
        key:
          type: string
        variation:
          type: integer
    FeatureFlagConfig:
      type: object
      properties:
        'on':
          type: boolean
        archived:
          type: boolean
        salt:
          type: string
          example: YWx0ZXJuYXRlLnBhZ2U=
        sel:
          type: string
          example: 45501b9314dc4641841af774cb038b96
        lastModified:
          type: integer
          format: int64
          example: 1469326565348
        version:
          type: integer
          example: 65
        targets:
          type: array
          items:
            $ref: '#/components/schemas/Target'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        fallthrough:
          $ref: '#/components/schemas/Fallthrough'
        offVariation:
          type: integer
        prerequisites:
          type: array
          items:
            $ref: '#/components/schemas/Prerequisite'
        trackEvents:
          type: boolean
          example: false
          description: Set to true to send detailed event information for this flag.
        trackEventsFallthrough:
          type: boolean
          example: true
          description: >-
            Set to true to send detailed event information when targeting is
            enabled but no individual targeting rule is matched.
    Defaults:
      type: object
      description: Default values to be used when a new environment is created.
      required:
        - onVariation
        - offVariation
      properties:
        onVariation:
          type: integer
          description: >-
            The index of the variation to be served when a flag's targeting is
            on (default variation).
        offVariation:
          type: integer
          description: The index of the variation to be served when a flag is off.
    FeatureFlag:
      type: object
      properties:
        key:
          type: string
          example: test-feature
        name:
          type: string
          description: Name of the feature flag.
          example: Test Feature
        description:
          type: string
          description: Description of the feature flag.
          example: This flag controls whether test feature is turned on or not.
        kind:
          type: string
          description: Whether the feature flag is a boolean flag or multivariate.
          example: boolean
        creationDate:
          type: integer
          format: int64
          description: >-
            A unix epoch time in milliseconds specifying the creation time of
            this flag.
          example: 1443652232590
        includeInSnippet:
          type: boolean
          example: false
        temporary:
          type: boolean
          description: Whether or not this flag is temporary.
          example: false
        maintainerId:
          type: string
          description: The ID of the member that should maintain this flag.
          example: 561c579cd8fd5c2704000001
        tags:
          type: array
          description: An array of tags for this feature flag.
          items:
            type: string
          example: []
        variations:
          type: array
          description: The variations for this feature flag.
          items:
            $ref: '#/components/schemas/Variation'
          example:
            - value: a
            - value: b
        goalIds:
          type: array
          description: >-
            An array goals from all environments associated with this feature
            flag
          items:
            type: string
          example:
            - d7239405bd89c930e885aa76
            - 405bc930e88d7239d895aa76
        _version:
          type: integer
          example: 23
        customProperties:
          type: object
          description: A mapping of keys to CustomProperty entries.
          additionalProperties:
            $ref: '#/components/schemas/CustomProperty'
          example:
            bugs:
              name: Issue tracker ids
              value:
                - '123'
                - '456'
            deprecated:
              name: Deprecated Date
              value: []
        _links:
          $ref: '#/components/schemas/Links'
        _maintainer:
          $ref: '#/components/schemas/Member'
        environments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FeatureFlagConfig'
        archivedDate:
          type: integer
          format: int64
          description: >-
            A unix epoch time in milliseconds specifying the archived time of
            this flag.
          example: 1443652232590
        archived:
          type: boolean
          description: Whether or not this flag is archived.
          example: false
        clientSideAvailability:
          $ref: '#/components/schemas/ClientSideAvailability'
        defaults:
          $ref: '#/components/schemas/Defaults'
    FeatureFlags:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/FeatureFlag'
        totalCount:
          type: number
    FeatureFlagCopyObject:
      type: object
      properties:
        key:
          type: string
          description: The environment key to be used.
          example: staging
        currentVersion:
          type: integer
          description: >-
            If the latest version of the flag matches provided version it will
            copy, otherwise it will return a conflict.
          example: 65
      required:
        - key
    CopyActions:
      type: string
      example: []
      enum:
        - updateOn
        - updatePrerequisites
        - updateTargets
        - updateRules
        - updateFallthrough
        - updateOffVariation
    FeatureFlagStatus:
      type: object
      properties:
        name:
          type: string
          description: >
            | Name     | Description |

            | --------:| ----------- |

            | new      | the feature flag was created within the last 7 days,
            and has not been requested yet |

            | active   | the feature flag was requested by your servers or
            clients within the last 7 days |

            | inactive | the feature flag was created more than 7 days ago, and
            hasn't been requested by your servers or clients within the past 7
            days |

            | launched | one variation of the feature flag has been rolled out
            to all your users for at least 7 days |
          enum:
            - new
            - active
            - inactive
            - launched
        lastRequested:
          type: string
          example: '2016-08-16T21:10:11.886Z'
        default:
          type: object
        _links:
          $ref: '#/components/schemas/Links'
    FeatureFlagStatuses:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/FeatureFlagStatus'
    FeatureFlagStatusForQueriedEnvironment:
      type: object
      properties:
        name:
          type: string
          description: >
            | Name     | Description |

            | --------:| ----------- |

            | new      | the feature flag was created within the last 7 days,
            and has not been requested yet |

            | active   | the feature flag was requested by your servers or
            clients within the last 7 days |

            | inactive | the feature flag was created more than 7 days ago, and
            hasn't been requested by your servers or clients within the past 7
            days |

            | launched | one variation of the feature flag has been rolled out
            to all your users for at least 7 days |
          enum:
            - new
            - active
            - inactive
            - launched
        lastRequested:
          type: string
          example: '2016-08-16T21:10:11.886Z'
        default:
          type: object
    FeatureFlagStatusAcrossEnvironments:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        key:
          type: string
        environments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FeatureFlagStatusForQueriedEnvironment'
    UsageError:
      type: object
      properties:
        message:
          type: string
          example: >-
            This is a beta API, you must pass beta in the LD-API-Version header
            to use it.
    UserTargetingExpirationResourceIdForFlag:
      type: object
      properties:
        kind:
          type: string
        projectKey:
          type: string
        environmentKey:
          type: string
        flagKey:
          type: string
        key:
          type: string
    UserTargetingExpirationForFlag:
      type: object
      properties:
        expirationDate:
          type: integer
          format: int64
          description: Unix epoch time in milliseconds specifying the expiration date
          example: 1735689600000
        variationId:
          type: string
          description: the ID of the variation that the user is targeted on a flag
        userKey:
          type: string
          description: Unique identifier for the user
        _id:
          type: string
        _resourceId:
          $ref: '#/components/schemas/UserTargetingExpirationResourceIdForFlag'
        _links:
          $ref: '#/components/schemas/Links'
        _version:
          type: integer
    UserTargetingExpirationForFlags:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserTargetingExpirationForFlag'
    SemanticPatchInstruction:
      type: array
      items:
        properties:
          kind:
            type: string
            example: removeUserTargets
            description: >-
              The name of the modification you would like to perform on a
              resource.
    SemanticPatchOperation:
      type: object
      properties:
        comment:
          type: string
          example: This is a comment string
        instructions:
          $ref: '#/components/schemas/SemanticPatchInstruction'
      required:
        - instructions
    FeatureFlagChangeRequestReviewStatus:
      type: string
      description: >
        | Name     | Description |

        | --------:| ----------- |

        | pending  | the feature flag change request has not been reviewed yet |

        | approved | the feature flag change request has been approved and can
        now be applied |

        | declined | the feature flag change request has been declined and
        cannot be applied |
      enum:
        - pending
        - approved
        - declined
    FeatureFlagChangeRequestReview:
      type: object
      properties:
        creationDate:
          type: integer
          description: >-
            A unix epoch time in milliseconds specifying the date the change
            request was reviewed
        kind:
          $ref: '#/components/schemas/FeatureFlagChangeRequestReviewStatus'
        memberId:
          $ref: '#/components/schemas/Id'
        _id:
          $ref: '#/components/schemas/Id'
    FeatureFlagChangeRequest:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/Id'
        _version:
          type: integer
        creationDate:
          type: integer
          description: >-
            A unix epoch time in milliseconds specifying the date the change
            request was requested
        requestorId:
          type: string
          description: The id of the member that requested the change
        reviewStatus:
          $ref: '#/components/schemas/FeatureFlagChangeRequestReviewStatus'
        status:
          type: string
          description: >
            | Name     | Description |

            | --------:| ----------- |

            | pending  | the feature flag change request has not been applied
            yet |

            | completed| the feature flag change request has been applied
            successfully |

            | failed   | the feature flag change request has been applied but
            the changes were not applied successfully |
          enum:
            - pending
            - completed
            - failed
        appliedByMemberID:
          type: string
          description: The id of the member that applied the change request
        appliedDate:
          type: integer
          description: >-
            A unix epoch time in milliseconds specifying the date the change
            request was applied
        currentReviewsByMemberId:
          $ref: '#/components/schemas/FeatureFlagChangeRequestReview'
        allReviews:
          type: array
          items:
            $ref: '#/components/schemas/FeatureFlagChangeRequestReview'
        notifyMemberIds:
          type: array
          items:
            type: string
          example:
            - memberId
            - memberId2
        instructions:
          $ref: '#/components/schemas/SemanticPatchInstruction'
    FeatureFlagChangeRequests:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/FeatureFlagChangeRequest'
    UserSegmentRule:
      type: object
      properties:
        clauses:
          type: array
          items:
            $ref: '#/components/schemas/Clause'
        weight:
          type: integer
        bucketBy:
          type: string
    Site:
      type: object
      properties:
        href:
          type: string
          example: /features/sort.order
        type:
          type: string
          example: text/html
    FlagListItem:
      type: object
      properties:
        name:
          type: string
        key:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
        _site:
          $ref: '#/components/schemas/Site'
    UserSegment:
      type: object
      required:
        - key
        - name
        - creationDate
      properties:
        key:
          type: string
          description: Unique identifier for the user segment.
          example: beta-testers
        name:
          type: string
          description: Name of the user segment.
          example: Beta Testers
        description:
          type: string
          description: Description of the user segment.
          example: Users in this segment can access beta features.
        tags:
          type: array
          items:
            type: string
          example:
            - dev
            - ops
          description: An array of tags for this user segment.
        creationDate:
          type: integer
          format: int64
          description: >-
            A unix epoch time in milliseconds specifying the creation time of
            this flag.
          example: 1443652232590
        included:
          type: array
          items:
            type: string
          description: An array of user keys that are included in this segment.
        excluded:
          type: array
          items:
            type: string
          description: >-
            An array of user keys that should not be included in this segment,
            unless they are also listed in "included".
        rules:
          type: array
          items:
            $ref: '#/components/schemas/UserSegmentRule'
          description: >-
            An array of rules that can cause a user to be included in this
            segment.
        unbounded:
          type: boolean
          example: false
          description: >-
            Controls whether this segment can support unlimited numbers of
            users. Requires the beta API and additional setup. Include/exclude
            lists in this payload are not used in unbounded segments.
        version:
          type: integer
        _links:
          $ref: '#/components/schemas/Links'
        _flags:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/FlagListItem'
    UserSegments:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserSegment'
    UserTargetingExpirationForSegment:
      type: object
      properties:
        expirationDate:
          type: integer
          format: int64
          description: Unix epoch time in milliseconds specifying the expiration date
          example: 1735689600000
        targetType:
          type: string
          description: >-
            either the included or excluded variation that the user is targeted
            on a segment
        userKey:
          type: string
          description: Unique identifier for the user
        _id:
          type: string
        _resourceId:
          $ref: '#/components/schemas/UserTargetingExpirationResourceIdForFlag'
        _links:
          $ref: '#/components/schemas/Links'
        _version:
          type: integer
    UnboundedSegmentTargetChanges:
      type: object
      properties:
        add:
          type: array
          example:
            - user@launchdarkly.com
          items:
            type: string
          description: Users to add to this list of targets
        remove:
          type: array
          example: []
          items:
            type: string
          description: Users to remove from this list of targets
    User:
      type: object
      properties:
        key:
          type: string
          example: a00bea
        secondary:
          type: string
        ip:
          type: string
        country:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        avatar:
          type: string
        name:
          type: string
          example: Bob Loblaw
        anonymous:
          type: boolean
        custom:
          type: object
          example:
            company: example.com
    UserRecord:
      type: object
      properties:
        lastPing:
          type: string
          example: '2015-03-03T02:37:22.492Z'
        environmentId:
          type: string
          example: 54ac2d97de674204ddd61096
        ownerId:
          $ref: '#/components/schemas/Id'
        user:
          $ref: '#/components/schemas/User'
        avatar:
          type: string
          example: 'https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg'
    Users:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        totalCount:
          type: number
          example: 3
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserRecord'
    UserFlagSetting:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _value:
          type: boolean
          description: >-
            The most important attribute in the response. The _value is the
            current setting for the user. For a boolean feature toggle, this
            will be true, false, or null if there is no defined fallthrough
            value.
          example: true
        setting:
          type: boolean
          description: >-
            The setting attribute indicates whether you've explicitly targeted
            this user to receive a particular variation. For example, if you
            have explicitly turned off a feature toggle for a user, setting will
            be false. A setting of null means that you haven't assigned that
            user to a specific variation.
          example: null
    UserFlagSettings:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserFlagSetting'
          example:
            sort.order:
              _links:
                self:
                  href: /api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order
                  type: application/json
                _value: true
                setting: null
            alternate.page:
              _links:
                self:
                  href: >-
                    /api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page
                  type: application/json
              _value: 'false,'
              setting: null
    UserTargetingExpirationOnFlagsForUser:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserTargetingExpirationForFlag'
    AuditLogEntry:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _id:
          $ref: '#/components/schemas/Id'
        date:
          type: integer
          format: int64
          example: 1472243938774
        kind:
          type: string
          example: environment
        name:
          type: string
          example: Testing
        description:
          type: string
          example: Changed the name from Test to Testing
        shortDescription:
          type: string
          example: '""'
        comment:
          type: string
          example: This is a comment string
        member:
          $ref: '#/components/schemas/Member'
        titleVerb:
          type: string
          example: changed the name of
        title:
          type: string
          example: >-
            [Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name
            of [Testing](https://app.launchdarkly.com/settings#/projects)
        target:
          type: object
          properties:
            _links:
              $ref: '#/components/schemas/Links'
            name:
              type: string
              example: Testing
            resources:
              type: array
              items:
                type: string
                example: 'proj/alexis:env/test'
    AuditLogEntries:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
    Statement:
      type: object
      properties:
        resources:
          type: array
          items:
            type: string
            description: A resource specifier string
            example: 'proj/*:env/*:flag/my-flag'
        notResources:
          type: array
          items:
            type: string
            description: A resource specifier string
            example: 'proj/*:env/*:flag/my-flag'
          description: >-
            Targeted resource will be those resources NOT in this list. The
            "resources`" field must be empty to use this field.
        actions:
          type: array
          items:
            type: string
            description: An action to perform on a resource.
            example: updateOn
        notActions:
          type: array
          items:
            type: string
            description: An action to perform on a resource.
            example: updateOn
          description: >-
            Targeted actions will be those actions NOT in this list. The
            "actions" field must be empty to use this field.
        effect:
          type: string
          enum:
            - allow
            - deny
    Webhook:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _id:
          $ref: '#/components/schemas/Id'
        url:
          type: string
          description: The URL of the remote webhook.
          example: 'https://example.com/example'
        secret:
          type: string
          description: >-
            If defined, the webhooks post request will include a X-LD-Signature
            header whose value will contain an HMAC SHA256 hex digest of the
            webhook payload, using the secret as the key.
          example: frobozz
        'on':
          type: boolean
          description: Whether this webhook is enabled or not.
          example: true
        name:
          type: string
          description: The name of the webhook.
          example: Example hook
        statements:
          type: array
          items:
            $ref: '#/components/schemas/Statement'
        tags:
          type: array
          description: Tags assigned to this webhook.
          items:
            type: string
            example: []
    Webhooks:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
    Policy:
      type: object
      properties:
        resources:
          type: array
          items:
            type: string
            description: A resource specifier string
            example: 'proj/*:env/*:flag/my-flag'
        notResources:
          type: array
          items:
            type: string
            description: A resource specifier string
            example: 'proj/*:env/*:flag/my-flag'
          description: >-
            Targeted resource will be those resources NOT in this list. The
            "resources`" field must be empty to use this field.
        actions:
          type: array
          items:
            type: string
            description: An action to perform on a resource.
            example: updateOn
        notActions:
          type: array
          items:
            type: string
            description: An action to perform on a resource.
            example: updateOn
          description: >-
            Targeted actions will be those actions NOT in this list. The
            "actions" field must be empty to use this field.
        effect:
          type: string
          description: Effect of the policy - allow or deny.
          example: deny
    CustomRole:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        name:
          type: string
          description: Name of the custom role.
          example: revenue team
        key:
          type: string
          description: The 20-hexdigit id or the key for a custom role.
          example: revenue-team
        description:
          type: string
          description: Description of the custom role.
          example: Description of revenue team role here
        _id:
          $ref: '#/components/schemas/Id'
        policy:
          type: array
          items:
            $ref: '#/components/schemas/Policy'
    CustomRoles:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/CustomRole'
    Members:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        totalCount:
          type: number
    Destination:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _id:
          type: string
          example: 37ed9aad-de0a-4665-932e-41c35587aeea
          description: Unique destination ID.
        name:
          type: string
          example: Example Google Pub/Sub Destination
          description: The destination name
        kind:
          type: string
          example: google-pubsub
          description: >-
            Destination type ("google-pubsub", "kinesis", "mparticle", or
            "segment")
          enum:
            - google-pubsub
            - kinesis
            - mparticle
            - segment
        config:
          type: object
          description: destination-specific configuration.
          example:
            project: cool-project
            topic: test
        'on':
          type: boolean
          example: true
          description: Whether the data export destination is on or not.
        version:
          type: integer
          example: 2
    Destinations:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Destination'
    UsageLinks:
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
        subseries:
          type: array
          description: The following links that are in the response.
          items:
            $ref: '#/components/schemas/Link'
    StreamUsageSeries:
      type: object
      properties:
        '0':
          type: integer
          format: int64
          description: A key corresponding to a time series data point.
          example: 0
        time:
          type: integer
          format: int64
          description: >-
            A unix epoch time in milliseconds specifying the creation time of
            this flag.
          example: 1551740400000
    Usage:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/UsageLinks'
        series:
          type: array
          items:
            $ref: '#/components/schemas/StreamUsageSeries'
    StreamUsageLinks:
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
        subseries:
          type: array
          description: The following links that are in the response.
          items:
            $ref: '#/components/schemas/Link'
    Streams:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/StreamUsageLinks'
    StreamUsageMetadata:
      type: object
      properties:
        sdk:
          type: string
          description: The language of the sdk
          example: ruby
        version:
          type: string
          description: The version of the SDK
          example: 5.4.3
        source:
          type: string
          example: server
    Stream:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/StreamUsageLinks'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/StreamUsageMetadata'
        series:
          type: array
          items:
            $ref: '#/components/schemas/StreamUsageSeries'
    StreamUsageError:
      type: object
      properties:
        code:
          type: string
          example: not_found
        message:
          type: string
          example: Stream source not found
    StreamBySDKLinks:
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
    StreamBySDKLinksMetadata:
      type: object
      properties:
        sdk:
          type: string
          example: ruby
        version:
          type: string
          example: 5.4.3
        source:
          type: string
          example: server
    StreamBySDK:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/StreamBySDKLinks'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/StreamBySDKLinksMetadata'
        series:
          type: array
          items:
            $ref: '#/components/schemas/StreamUsageSeries'
    StreamSDKVersionData:
      type: object
      properties:
        sdk:
          type: string
          description: The language of the sdk
          example: ruby
        version:
          type: string
          description: The version of the sdk
          example: 5.4.3
    StreamSDKVersion:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/StreamBySDKLinks'
        sdkVersions:
          type: array
          items:
            $ref: '#/components/schemas/StreamSDKVersionData'
    MAU:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/UsageLinks'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/StreamBySDKLinksMetadata'
        series:
          type: array
          items:
            $ref: '#/components/schemas/StreamUsageSeries'
    MAUMetadata:
      type: object
    MAUbyCategory:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/StreamBySDKLinks'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/MAUMetadata'
        series:
          type: array
          items:
            $ref: '#/components/schemas/StreamUsageSeries'
    Events:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/UsageLinks'
    EvaluationUsageError:
      type: object
      properties:
        code:
          type: string
          example: not_found
        message:
          type: string
          example: unknown environment
    Token:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _id:
          $ref: '#/components/schemas/Id'
        ownerId:
          $ref: '#/components/schemas/Id'
        memberId:
          $ref: '#/components/schemas/Id'
        _member:
          $ref: '#/components/schemas/Member'
        creationDate:
          type: integer
          format: int64
          description: >-
            A unix epoch time in milliseconds specifying the creation time of
            this access token.
          example: 1443652232590
        lastModified:
          type: integer
          format: int64
          example: 1469326565348
          description: >-
            A unix epoch time in milliseconds specifying the last time this
            access token was modified.
        lastUsed:
          type: integer
          format: int64
          example: 1469326565348
          description: >-
            A unix epoch time in milliseconds specifying the last time this
            access token was used to authorize access to the LaunchDarkly REST
            API.
        token:
          type: string
          example: '3243'
          description: >-
            The last 4 digits of the unique secret key for this access token. If
            creating or resetting the token, this will be the full token secret.
        name:
          type: string
          description: A human-friendly name for the access token
          example: My access token
        role:
          type: string
          description: The name of a built-in role for the token
          example: writer
        customRoleIds:
          type: array
          items:
            type: string
          description: >-
            A list of custom role IDs to use as access limits for the access
            token
        inlineRole:
          type: array
          items:
            $ref: '#/components/schemas/Statement'
        serviceToken:
          type: boolean
          description: >-
            Whether the token will be a service token
            https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens
        defaultApiVersion:
          type: integer
          description: The default API version for this token
    Tokens:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Token'
    RelayProxyConfig:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/Id'
        _creator:
          $ref: '#/components/schemas/Member'
        name:
          type: string
          description: A human-friendly name for the relay proxy configuration
          example: My relay proxy config
        policy:
          type: array
          items:
            $ref: '#/components/schemas/Policy'
        fullKey:
          type: string
          example: rel-8a3a773d-b75e-48eb-a850-492cda9266eo
          description: >-
            Full secret key. Only included if creating or resetting the relay
            proxy configuration
        displayKey:
          type: string
          example: 66eo
          description: >-
            The last 4 digits of the unique secret key for this relay proxy
            configuration
        creationDate:
          type: integer
          format: int64
          description: >-
            A unix epoch time in milliseconds specifying the creation time of
            this relay proxy configuration
          example: 1443652232590
        lastModified:
          type: integer
          format: int64
          example: 1469326565348
          description: >-
            A unix epoch time in milliseconds specifying the last time this
            relay proxy configuration was modified
      required:
        - _id
        - _creator
        - name
        - policy
        - displayKey
        - creationDate
        - lastModified
    RelayProxyConfigs:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/RelayProxyConfig'
    HierarchicalLinks:
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
    IntegrationSubscription:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/HierarchicalLinks'
        _id:
          $ref: '#/components/schemas/Id'
        kind:
          type: string
          description: The type of integration associated with this configuration.
          example: datadog
        name:
          type: string
          description: The user-defined name associated with this configuration.
          example: V2
        config:
          type: object
          description: A key-value mapping of configuration fields.
          example:
            apiKey: 582**************************116
            hostURL: 'https://api.datadoghq.com'
        statements:
          type: array
          items:
            $ref: '#/components/schemas/Statement'
        'on':
          type: boolean
          description: Whether or not the integration is currently active.
          example: true
        tags:
          type: array
          items:
            type: string
          description: An array of tags for this integration configuration.
        _status:
          type: object
          properties:
            successCount:
              type: integer
              example: 6
            lastSuccess:
              type: integer
              format: int64
              description: >-
                A unix epoch time in milliseconds specifying the last time this
                integration was successfully used.
              example: 1443652232590
            errorCount:
              type: integer
              example: 2
    Integrations:
      type: object
      properties:
        _links:
          type: object
          description: A mapping of integration types to their respective API endpoints.
          example:
            appdynamics:
              href: /api/v2/integrations/appdynamics
              type: application/json
            splunk:
              href: /api/v2/integrations/splunk
              type: application/json
        items:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationSubscription'
    Integration:
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
        items:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationSubscription'
  responses:
    Standard401:
      description: Invalid access token.
    Project2xx:
      description: Successful Project response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'
    Standard400:
      description: Invalid request body.
    Standard409:
      description: Status conflict.
    Standard404:
      description: Invalid resource specifier.
    Standard204:
      description: Action completed successfully.
    Environment2xx:
      description: Environment response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Environment'
    BetaApi403:
      description: >-
        This is a beta API, you must pass beta in the LD-API-Version header to
        use it.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsageError'
    UserSegment2xx:
      description: User segment response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserSegment'
    Webhook2xx:
      description: Webhook response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Webhook'
    CustomRole2xx:
      description: Custom role response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomRole'
    Member2xx:
      description: Member response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Member'
    Destination2xx:
      description: Destination response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Destination'
    StreamUsage404:
      description: The stream source you requested could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StreamUsageError'
    EvaluationUsage404:
      description: The environment or flag you requested could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EvaluationUsageError'
    Token2xx:
      description: Token response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token'
    Standard403:
      description: Access to the requested resource was denied.
    RelayProxyConfig2xx:
      description: Relay proxy config response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RelayProxyConfig'
    Root200:
      description: A list of links to available resources in the API.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Links'
  parameters:
    ProjectKey:
      name: projectKey
      in: path
      required: true
      description: >-
        The project key, used to tie the flags together under one project so
        they can be managed together.
      schema:
        type: string
    EnvironmentKey:
      name: environmentKey
      in: path
      required: true
      description: >-
        The environment key, used to tie together flag configuration and users
        under one environment so they can be managed together.
      schema:
        type: string
    EnvironmentSDKKeyExpiry:
      name: expiry
      in: query
      required: false
      description: >-
        An expiration time for the old environment SDK key, expressed as a Unix
        epoch time in milliseconds. By default, the key will expire immediately.
      schema:
        type: integer
        format: int64
    EnvironmentMobileKeyExpiry:
      name: expiry
      in: query
      required: false
      description: >-
        The expiry parameter is deprecated for this endpoint, so the old mobile
        key will always expire immediately. This parameter will be removed in an
        upcoming major API client version.
      schema:
        type: integer
        format: int64
    EnvironmentKeyQuery:
      name: env
      in: query
      required: false
      description: >-
        By default, each feature will include configurations for each
        environment. You can filter environments with the env query parameter.
        For example, setting env=["production"] will restrict the returned
        configurations to just your production environment.
      explode: true
      schema:
        type: array
        items:
          type: string
    SummaryQuery:
      name: summary
      in: query
      required: false
      description: >-
        By default in api version >= 1, flags will _not_ include their list of
        prerequisites, targets or rules.  Set summary=0 to include these fields
        for each flag returned.
      schema:
        type: boolean
    ArchivedQuery:
      name: archived
      in: query
      required: false
      description: >-
        When set to 1, only archived flags will be included in the list of flags
        returned.  By default, archived flags are not included in the list of
        flags.
      schema:
        type: boolean
    LimitQuery:
      name: limit
      in: query
      required: false
      description: >-
        The number of objects to return. Defaults to -1, which returns
        everything.
      schema:
        type: number
    OffsetQuery:
      name: offset
      in: query
      required: false
      description: >-
        Where to start in the list. This is for use with pagination. For
        example, an offset of 10 would skip the first 10 items and then return
        the next limit items.
      schema:
        type: number
    FilterQuery:
      name: filter
      in: query
      required: false
      description: >-
        A comma-separated list of filters. Each filter is of the form
        field:value.
      schema:
        type: string
    SortQuery:
      name: sort
      in: query
      required: false
      description: >-
        A comma-separated list of fields to sort by. A field prefixed by a -
        will be sorted in descending order.
      schema:
        type: string
    Tag:
      name: tag
      in: query
      required: false
      description: Filter by tag. A tag can be used to group flags across projects.
      schema:
        type: string
    CloneFlagKeyQuery:
      name: clone
      in: query
      required: false
      description: >-
        The key of the feature flag to be cloned. The key identifies the flag in
        your code.  For example, setting clone=flagKey will copy the full
        targeting configuration for all environments (including on/off state)
        from the original flag to the new flag.
      schema:
        type: string
    FeatureFlagKey:
      name: featureFlagKey
      in: path
      required: true
      description: The feature flag's key. The key identifies the flag in your code.
      schema:
        type: string
    FeatureFlagChangeRequestId:
      name: featureFlagChangeRequestId
      in: path
      required: true
      description: The feature flag change request ID
      schema:
        type: string
    UserSegmentKey:
      name: userSegmentKey
      in: path
      required: true
      description: >-
        The user segment's key. The key identifies the user segment in your
        code.
      schema:
        type: string
    Limit:
      name: limit
      in: query
      required: false
      description: Pagination limit.
      schema:
        type: integer
    HMAC:
      name: h
      in: query
      required: false
      description: This parameter is required when following "next" links.
      schema:
        type: string
    ScrollId:
      name: scrollId
      in: query
      required: false
      description: This parameter is required when following "next" links.
      schema:
        type: string
    Query:
      name: q
      in: query
      required: false
      description: Search query.
      schema:
        type: string
    Offset:
      name: offset
      in: query
      required: false
      description: Specifies the first item to return in the collection.
      schema:
        type: integer
    After:
      name: after
      in: query
      required: false
      description: >-
        A timestamp filter, expressed as a Unix epoch time in milliseconds. All
        entries returned will have occurred after this timestamp.
      schema:
        type: integer
        format: int64
    UserKey:
      name: userKey
      in: path
      required: true
      description: The user's key.
      schema:
        type: string
    Before:
      name: before
      in: query
      required: false
      description: >-
        A timestamp filter, expressed as a Unix epoch time in milliseconds. All
        entries returned will have before this timestamp.
      schema:
        type: integer
        format: int64
    Q:
      name: q
      in: query
      required: false
      description: >-
        Text to search for. You can search for the full or partial name of the
        resource involved or full or partial email address of the member who
        made the change.
      schema:
        type: string
    AuditLimit:
      name: limit
      in: query
      required: false
      description: >-
        A limit on the number of audit log entries to be returned, between 1 and
        20.
      schema:
        type: number
    Spec:
      name: spec
      in: query
      required: false
      description: >-
        A resource specifier, allowing you to filter audit log listings by
        resource.
      schema:
        type: string
    ResourceId:
      name: resourceId
      in: path
      required: true
      description: The resource ID.
      schema:
        type: string
    CustomRoleKey:
      name: customRoleKey
      in: path
      required: true
      description: The custom role key.
      schema:
        type: string
    MemberId:
      name: memberId
      in: path
      required: true
      description: The member ID.
      schema:
        type: string
    DestinationId:
      name: destinationId
      in: path
      required: true
      description: The data export destination ID.
      schema:
        type: string
    StreamSource:
      name: source
      in: path
      required: true
      description: The source of where the stream comes from.
      schema:
        type: string
    EventType:
      name: type
      in: path
      required: true
      description: The type of event we would like to track.
      schema:
        type: string
    EvaluationEnvId:
      name: envId
      in: path
      required: true
      description: The environment id for the flag evaluations in question.
      schema:
        type: string
    EvaluationFlagKey:
      name: flagKey
      in: path
      required: true
      description: The key of the flag we want metrics for.
      schema:
        type: string
    TokenShowAllQuery:
      name: showAll
      in: query
      required: false
      description: >-
        If set to true, and the authentication access token has the "Admin"
        role, personal access tokens for all members will be retrieved.
      schema:
        type: boolean
    TokenId:
      name: tokenId
      in: path
      required: true
      description: The access token ID.
      schema:
        type: string
    TokenExpiry:
      name: expiry
      in: query
      required: false
      description: >-
        An expiration time for the old token key, expressed as a Unix epoch time
        in milliseconds. By default, the token will expire immediately.
      schema:
        type: integer
        format: int64
    RelayProxyConfigId:
      name: id
      in: path
      required: true
      description: The relay proxy configuration ID
      schema:
        type: string
    RelayProxyConfigsExpiry:
      name: expiry
      in: query
      required: false
      description: >-
        An expiration time for the old relay proxy configuration key, expressed
        as a Unix epoch time in milliseconds. By default, the relay proxy
        configuration will expire immediately
      schema:
        type: integer
        format: int64
    IntegrationKey:
      name: integrationKey
      in: path
      required: true
      description: The key used to specify the integration kind.
      schema:
        type: string
    IntegrationId:
      name: integrationId
      in: path
      required: true
      description: The integration ID.
      schema:
        type: string
  requestBodies:
    PatchOperationArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PatchOperation'
      description: >-
        Requires a JSON Patch representation of the desired changes to the
        project. 'http://jsonpatch.com/'
      required: true
    patchExpiringUserTargetsSemanticpatchwithcomment:
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/SemanticPatchOperation'
      description: >-
        Requires a Semantic Patch representation of the desired changes to the
        resource.
        'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'.
        The addition of comments is also supported.
      required: true
    PatchOperationArray2:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PatchOperation'
      description: >-
        Requires a JSON Patch representation of the desired changes to the
        project. 'http://jsonpatch.com/' Feature flag patches also support JSON
        Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition
        of comments is also supported.
      required: true
